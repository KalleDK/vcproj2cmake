#!/usr/bin/ruby

require 'find'
require 'pathname'
script_fqpn = File.expand_path $0
script_path = Pathname.new(script_fqpn).parent
source_root = Dir.pwd
v2c_config_dir = "./cmake/vcproj2cmake"

time_cmake_root_folder = 0
arr_excl_proj = Array.new()
if File.exist?(v2c_config_dir)
  time_cmake_root_folder = File.stat(v2c_config_dir).mtime.to_i
  excluded_projects = "#{v2c_config_dir}/project_exclude_list.txt"
  if File.exist?(excluded_projects)
    File.new(excluded_projects, 'r').each do |line|
      # TODO: we probably need a per-platform implementation,
      # since exclusion is most likely per-platform after all
      arr_excl_proj.push(line)
    end
  end
end

projlistfile = File.new("#{v2c_config_dir}/all_sub_projects.txt", "w+")

Find.find('./') do
  |f|
  if test(?d, f)
    # skip CMake build directories! (containing CMake-generated .vcproj files!)
    # FIXME: more precise checking: check file _content_ against CMake generation!
    is_excluded = false
    is_excluded = true if f =~ /^build/i
    arr_excl_proj.each do |excluded|
      excl_regex = "^\.\/#{excluded.chomp}$"
      #puts "MATCH: #{f} vs. #{excl_regex}"
      if f =~ /#{excl_regex}/
        is_excluded = true
      end
    end
    #puts "excluded: #{is_excluded}"
    if is_excluded == true
      puts "EXCLUDED #{f}!"
      next
    end
    puts "processing #{f}!"
    dir = Dir.open(f)
    #puts "entries: #{dir.entries}"
    if (!dir.entries.grep(/^CMakeLists.txt$/i).empty?)
      #puts dir.entries
      puts "CMakeLists.txt exists in #{f}, checking!"
      if (File.new("#{f}/CMakeLists.txt", "r").grep(/AUTO-GENERATED by/).empty?)
        puts "#{f}/CMakeLists.txt already existing in \"native\" form: skipping!"
        next
      else
	# ok, it _is_ a CMakeLists.txt, but a temporary vcproj2cmake one
	# which we can overwrite.
        puts "auto-generated CMakeLists.txt, overwriting!"
      end
    end
    files = dir.entries.grep(/\.vcproj$/i)
    #puts files

    # in each directory, find the .vcproj file to use.
    # Prefer xxx_vc8.vcproj, but in cases of directories where this is
    # not available, use a non-_vc8 file.
    projfile = nil
    files.each do |file|
      if file =~ /_vc8.vcproj$/i
        # ok, we found a _vc8 version, quit searching since this is what we prefer
        projfile = file
        break
      end
      if file =~ /.vcproj$/i
        projfile = file
	# do NOT break here (another _vc8 file might come along!)
      end
    end
    #puts "projfile is #{projfile}"
    if projfile.nil?
    else
      if (File.new("#{f}/#{projfile}", "r").grep(/CMakeLists.txt/).empty?)
        if projfile =~ /_vc8.vcproj/i
        else
          puts "Darn, no _vc8.vcproj in #{f}! Should have offered one..."
        end
        # verify age of .vcproj file... (NOT activated: experimental feature!)
        rebuild = 0
        if File.exist?("#{f}/CMakeLists.txt")
          # is .vcproj newer (or equal: let's rebuild copies with flat timestamps!)
          # than CMakeLists.txt?
          # NOTE: if we need to add even more dependencies here, then it
          # might be a good idea to do this stuff properly and use a CMake-based re-build
          # infrastructure instead...
          # FIXME: doesn't really seem to work... yet?
          time_proj = File.stat("#{f}/#{projfile}").mtime.to_i
          time_cmake_folder = 0
          if File.exist?("#{f}/#{v2c_config_dir}")
            time_cmake_folder = File.stat("#{f}/#{v2c_config_dir}").mtime.to_i
          end
          time_CMakeLists = File.stat("#{f}/CMakeLists.txt").mtime.to_i
          #puts "TIME: CMakeLists #{time_CMakeLists} proj #{time_proj} cmake_folder #{time_cmake_folder} cmake_root_folder #{time_cmake_root_folder}"
          if time_proj > time_CMakeLists
            #puts "modified: project!"
            rebuild = 1
          elsif time_cmake_folder > time_CMakeLists
            #puts "modified: cmake/!"
            rebuild = 1
          elsif time_cmake_root_folder > time_CMakeLists
            #puts "modified: cmake/ root!"
            rebuild = 1
          end
        else
          # no CMakeLists.txt at all, definitely process this project
          rebuild = 2
        end
        if rebuild > 0
          #puts "REBUILD #{f}!! #{rebuild}"
        end
        #puts "#{f}/#{file}"
        # see "A dozen (or so) ways to start sub-processes in Ruby: Part 1"
        puts "launching ruby #{script_path}/vcproj2cmake.rb '#{f}/#{projfile}' '#{f}/CMakeLists.txt' '#{source_root}'"
        output = `ruby #{script_path}/vcproj2cmake.rb '#{f}/#{projfile}' '#{f}/CMakeLists.txt' '#{source_root}'`
        puts "output was:"
        puts "#{output}"

        # the root directory is special: it might contain another project (it shouldn't!!),
        # thus we need to skip it if so (then include the root directory
        # project by placing a CMakeLists_native.txt there and have it include the
        # auto-generated CMakeLists.txt)
        if not f == "./"
          if f.include? ' ' # quote strings containing spaces!!
            projlistfile.puts("add_subdirectory( \"#{f}\" )")
          else
            projlistfile.puts("add_subdirectory( #{f} )")
          end
        end
        #output.split("\n").each do |line|
        #  puts "[parent] output: #{line}"
        #end
        #puts
      else
        puts "Skipping CMake-generated file #{f}/#{projfile}"
      end
    end
  end
end
